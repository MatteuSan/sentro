//--------------------------------------------------------------------
//  Copyright (c) 2024 Matteu
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//--------------------------------------------------------------------

@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';

@use 'validators';

/// Stores the prefix for the design system.
/// @access public
$ds-prefix: '' !default;

/// Stores the context for the design system.
/// @access public
$ds-context: '' !default;

/// Validation for tokens.
/// @access public
$validation: true !default;

/// Stores all the tokens for getting raw values.
/// @access private
$_ds-token-registry: ();

/// Default token separator
/// @access private
$_ds-token-separator: '-' !default;

/// Creates a theme token.
/// @param {string} $key
/// @param {*} $value
/// @return {*} returns a token as CSS custom properties with prefix and context.
@mixin create($key, $value) {
  --#{_sanitize-prefix($ds-prefix)}#{_sanitize-context($ds-context)}#{$key}: #{$value};
  @include _register-token($key, $value);
}

/// Configures a set of tokens, either using maps or separate arguments, to a selector.
/// @param {map} $token-map
/// @param {args} $tokens...
/// @return {*} CSS-ized tokens.
@mixin config($map: (), $tokens...) {
  @if not validators.is-empty($map) {
    @each $key, $value in $map {
      @if meta.type-of($value) == map {
        @each $_key, $_value in $value {
          @if $_key == 'default' {
            @if meta.type-of($_value) == map {
              @include config(('#{$key}': $_value));
            } @else {
              @include create('#{$key}', $_value);
            }
          } @else {
            @if meta.type-of($_value) == map {
              @include config(('#{$key}-#{$_key}': $_value));
            } @else {
              @include create('#{$key}-#{$_key}', $_value);
            }
          }
        }
      } @else {
        @include create('#{$key}', $value);
      }
    }
  }

  @if meta.keywords($tokens) {
    @each $key, $value in meta.keywords($tokens) {
      @if meta.type-of($value) == map {
        @each $_key, $_value in $value {
          @if $_key == 'default' {
            @if meta.type-of($_value) == map {
              @include config($map: ($key: $_value));
            } @else {
              @include create('#{$key}', $_value);
            }
          } @else {
            @if meta.type-of($_value) == map {
              @include config($map: ('#{$key}-#{$_key}': $_value));
            } @else {
              @include create('#{$key}-#{$_key}', $_value);
            }
          }
        }
      } @else {

        @include create($key, $value);

      }
    }
  }
}

/// DEPRECATED: Configures a set of tokens, either using maps or separate arguments, to a selector.
/// @deprecated Use token-config() instead.
/// @param {map} $token-map
/// @param {args} $tokens...
/// @return {*} CSS-ized tokens.
@mixin add($map: (), $tokens...) {
  @warn 'The token-add() mixin will be deprecated on version 1.x. Use the token-config() mixin instead.';
  @include config($map, $tokens...);
}

/// Retrieves an existing theme token.
/// @param {string} $key
/// @param {boolean} $important
/// @return {string} tokenized css custom property selector.
@function get($key, $important: false) {
  @if _is-registered-token($key) {
    @return var(--#{_sanitize-prefix($ds-prefix)}#{_sanitize-context($ds-context)}#{_sanitize-key($key)});
  }
  @if not $validation {
    @return var(--#{_sanitize-prefix($ds-prefix)}#{_sanitize-context($ds-context)}#{_sanitize-key($key)});
  }
  @if $important {
    @return var(--#{_sanitize-prefix($ds-prefix)}#{_sanitize-context($ds-context)}#{_sanitize-key($key)}) !important;
  }
}

/// Retrieves the raw value of an existing theme token.
/// @param {string} $key
/// @param {boolean} $important
/// @return {*} token value.
@function get-raw($key, $important: false) {
  @if _is-registered-token($key) {
    @return map.get($_ds-token-registry, $key);
  }
  @if not $validation {
    @return map.get($_ds-token-registry, $key);
  }
  @if $important {
    @return map.get($_ds-token-registry, $key) !important;
  }
}

// TODO: Find a way to implement this properly.
/// Retrieves the entire token registry.
/// @param {list<string>} $targets
/// @return {map} map of tokens.
// @function registry-get($targets: 'all') {
//   @if not feature.is-empty($targets) {
//     $targeted-tokens: ();
//     @each $target in $targets {
//       @each $key, $value in $_ds-token-registry {
//         @if string.index($key, $target) == 1 {
//           $targeted-tokens: map.set($targeted-tokens, $key, $value);
//         }
//       }
//     }
//     @return $targeted-tokens;
//   }
//
//   @if $targets == 'all' {
//     @return $_ds-token-registry;
//   }
//
//   @return $_ds-token-registry;
// }

/// Check if the query is a token or not. If the query is a token, output a token. If not, output as is.
/// @param {*} $query
/// @param {*} $fallback
/// @param {boolean} $important
/// @return {token|*} token or raw value.
@function switch($query, $fallback: (), $important: false) {
  @if not check($query) {
    @if not validators.is-empty($fallback) {
      @if $important { @return $fallback !important; }
      @return $fallback;
    }
    @if $important { @return $query !important; }
    @return $query;
  }
  @if $important { @return get($query) !important; }
  @return get($query);
}

/// Check if the query is a token or not. If the query is a token, output a raw token value. If not, output as is.
/// @param {*} $query
/// @param {*} $fallback
/// @param {boolean} $important
/// @return {token|*} token raw value or raw value.
@function switch-raw($query, $fallback: (), $important: false) {
  @if not check($query) {
    @if not validators.is-empty($fallback) {
      @if $important { @return $fallback !important; }
      @return $fallback;
    }
    @if $important { @return $query !important; }
    @return $query;
  }
  @if $important { @return get-raw($query) !important; }
  @return get-raw($query);
}

/// Checks if the query is a valid registered token. This is a different method from the private one.
/// @param {*} query
/// @return {boolean} validated query.
@function check($query) {
  @return _is-registered-token($query, false);
}

/// Sanitizes and verifies a key.
/// @access private
/// @param {string} $key
/// @return {string} sanitized and validated key.
@function _sanitize-key($key) {
  @if string.index($key, '$') {
    @return string.slice($key, 2);
  }
  @return $key;
}

/// Sanitizes and verifies a context.
/// @access private
/// @param {string} $context
/// @return {string} sanitized and validated context.
@function _sanitize-context($context) {
  @if validators.is-empty($context) {
    @return '';
  }
  @return '#{$context}-';
}

/// Sanitizes and verifies a prefix.
/// @access private
/// @param {string} $prefix
/// @return {string} sanitized and validated prefix.
@function _sanitize-prefix($prefix) {
  @if validators.is-empty($prefix) {
    @return '';
  }
  @return '#{$ds-prefix}-';
}

/// Registers a token to the token registry variable.
/// @access private
/// @param {string} $key
/// @param {*} $value
/// @return {void} token registry
@mixin _register-token($key, $value) {
  $_ds-token-registry: map.set($_ds-token-registry, $key, $value) !global;
}

/// Validates a query if it's a registered token or not
/// @access private
/// @param {string} $query
/// @return {boolean|error} is registered token
@function _is-registered-token($query, $errors: $validation) {
  @if not list.index(map.keys($_ds-token-registry), $query) {
    @if $errors {
      @error 'Invalid token: #{$query}. Please use a valid registered token: #{map.keys($_ds-token-registry)}';
    } @else {
      @return false;
    }
  } @else {
    @return true;
  }
}