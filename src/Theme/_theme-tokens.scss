//
//  Copyright (c) 2021 Matteu
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

@use 'sass:string';
@use 'sass:map';
@use 'sass:meta';

@use '../Feature';

$ds-prefix: 'sdb' !default;

/// Creates a theme token.
/// @param {string} $key
/// @param {*} $value
/// @return {*}
@mixin create($key, $value) {
    --#{$ds-prefix}-theme-#{$key}: #{$value};
}

/// Adds a set of tokens, either using maps or separate arguments, to a context-ed selector like :root.
/// @param {map} $token-map
/// @param {args} $tokens...
/// @return {*}
@mixin add($token-map: (), $tokens...) {
    @if not Feature.is-empty($token-map) {
        
        @each $key, $value in $token-map {
            
            @if meta.type-of($value) == map {
                
                @each $_key, $_value in $value {
                    
                    @if $_key == 'default' {
                        @include create(#{$key}, $_value);
                    } @else {
                        @include create(#{$key}-#{$_key}, $_value);
                    }
                    
                }
                
            } @else {
                
                @include create(#{$key}, $value);
                
            }
        }
        
    } @else {
        
        @each $key, $value in meta.keywords($tokens) {
            
            @if meta.type-of($value) == map {
                
                @each $_key, $_value in $value {
                    
                    @if $_key == 'default' {
                        @include create(#{$key}, $_value);
                    } @else {
                        @include create(#{$key}-#{$_key}, $_value);
                    }
                    
                }
                
            } @else {
                
                @include create($key, $value);
                
            }
            
        }
        
    }
}

/// Retrieves an existing theme key.
/// @param {string} $key
/// @return {string}
@function get($key) {
    @return var(--#{$ds-prefix}-theme-#{_sanitize-key($key)});
}

/// Sanitizes and verifies a key.
/// @param {string} $key
/// @return {string}
@function _sanitize-key($key) {
    @if string.index($key, '$') {
        @return string.slice($key, 2);
    }
    @return $key;
}
