//
// Copyright (c) 2021 Matteu
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';

@use 'prefix';
@use 'elevation-values' as v;

/// Applies elevation to a style.
/// @param {int} $level
/// @param {*} $color
/// @param {float} $opacity-boost
/// @return {*}
@mixin apply($level, $color: #000, $opacity-boost: 0.075) {
    
    $_umbra-opacity: 0.2;
    $_penumbra-opacity: 0.14;
    $_ambient-opacity: 0.12;
    
    @if meta.type-of($level) != number or not math.is-unitless($level) {
        @error "Invalid query: '#{$level}'. $level must be a unitless number";
    }
    
    @if $level < 0 or $level > 24 {
        @error "Invalid query: '#{$level}'. $level must be between 0 and 24";
    }
    
    $_umbra: map.get(v.$umbra-map, $level);
    $_penumbra: map.get(v.$penumbra-map, $level);
    $_ambient: map.get(v.$ambient-map, $level);
    
    $_umbra-color: rgba($color, $_umbra-opacity + $opacity-boost);
    $_penumbra-color: rgba($color, $_penumbra-opacity + $opacity-boost);
    $_ambient-color: rgba($color, $_ambient-opacity + $opacity-boost);
    
    $_umbra-value: #{'#{$_umbra} #{$_umbra-color}'};
    $_penumbra-value: #{'#{$_penumbra} #{$_penumbra-color}'};
    $_ambient-value: #{'#{$_ambient} #{$_ambient-color}'};
    
    $_value: (#{$_umbra-value}, #{$_penumbra-value}, #{$_ambient-value});
    
    @include prefix.prefix(box-shadow, $_value);
    
}