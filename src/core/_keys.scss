//
//  Copyright (c) 2021 Matteu
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

@use 'sass:string';
@use 'sass:map';
@use 'sass:meta';

@use '../feature';

/// Stores the prefix for the design system.
/// @access public
$ds-prefix: '' !default;

/// Stores the keys for getting raw values.
/// @access private
$_ds-key-registry: ();

/// Creates a key for a css property of a component.
/// @param {string} $key
/// @param {*} $value
/// @return {string} returns var() with key and fallback value.
@function create($key, $value) {
    $_ds-key-registry: map.set($_ds-key-registry, $key, $value) !global;
    @return var(--#{_sanitize-prefix($ds-prefix)}#{$key}, #{$value});
}

/// Retrieves an existing component key.
/// @param {string} $key
/// @return {string} returns var() with key.
@function get($key) {
    @return var(--#{_sanitize-prefix($ds-prefix)}#{$key});
}

/// Retrieves the raw value of an existing component key.
/// @param {string} $key
/// @return {string} returns var() with key.
@function get-raw($key) {
    @return map.get($_ds-key-registry, $key);
}

/// Binds the a value to the component key.
/// @param {string} $key
/// @param {*} $value
/// @return {string|*} returns an overrider css custom property with a new value.
@mixin bind($key, $value) {
    --#{_sanitize-prefix($ds-prefix)}#{$key}: #{$value};
}

/// Sanitizes and verifies a prefix.
/// @param {string} $prefix
/// @return {string} sanitized and validated prefix.
@function _sanitize-prefix($prefix) {
    @if feature.is-empty($prefix) {
        @return '';
    }
    @return '#{$prefix}-';
}