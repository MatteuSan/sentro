///
//  Copyright (c) 2022 Matteu
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
///

@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';

@use '../feature';

/// Stores all breakpoints of the design system. Reference for all mixins below
/// @access private
$_ds-breakpoint-registry: ();

/// Validation for breakpoints.
/// @access public
$validation: true !default;

/// Verifies a breakpoint.
/// @param {string} $query
/// @return {boolean} breakpoint verification.
@function check($query) {
  @return _is-registered-breakpoint($query, false);
}

/// Configures all the breakpoints to be used in the design system.
/// @param {*} $breakpoints...
/// @return {void} breakpoint configuration.
@mixin config($map: (), $breakpoints...) {
  @if not feature.is-empty($map) {
    @each $key, $value in $map {
      @if meta.type-of($value) == map {
        @each $_key, $_value in $value {
          @if $_key == 'default' {
            @if meta.type-of($_value) == map {
              @include config(('#{$key}': $_value))
            } @else {
              @include _register-breakpoint('#{$key}', $_value);
            }
          } @else {
            @if meta.type-of($_value) == map {
              @include config(('#{$key}-#{$_key}': $_value))
            } @else {
              @include _register-breakpoint('#{$key}-#{$_key}', $_value);
            }
          }
        }
      } @else {
        @include _register-breakpoint($key, $value);
      }
    }
  }

  @if meta.keywords($breakpoints) {
    @each $key, $value in meta.keywords($breakpoints) {
      @if meta.type-of($value) == map {
        @each $_key, $_value in $value {
          @if $_key == 'default' {
            @if meta.type-of($_value) == map {
              @include config(('#{$key}': $_value))
            } @else {
              @include _register-breakpoint('#{$key}', $_value);
            }
          } @else {
            @if meta.type-of($_value) == map {
              @include config(('#{$key}-#{$_key}': $_value))
            } @else {
              @include _register-breakpoint('#{$key}-#{$_key}', $_value);
            }
          }
        }
      } @else {
        @include _register-breakpoint($key, $value);
      }
    }
  }
}

/// Creates a breakpoint for an element.
/// @param {string} $query
/// @param {string} $context
/// @param {string} $property
/// @return {*} breakpoint.
@mixin create($query, $context: 'min', $property: 'width') {
  $_valid-contexts: ('min', 'max');
  $_valid-properties: ('width', 'height');

  @if not list.index($_valid-contexts, $context) {
    @error 'Invalid context: #{$context}. Expecting a valid context (#{$_valid-contexts}).';
  }

  @if not list.index($_valid-properties, $property) {
    @error 'Invalid property: #{$property}. Expecting a valid property (#{$_valid-properties}).';
  }

  @media screen and (#{$context}-#{$property}: _sanitize-breakpoint($query, $context)) {
    @content;
  }
}

/// Gets a breakpoint from query.
/// @param {string} $query
/// @return {int|null} breakpoint.
@function get($query) {
  @if _is-registered-breakpoint($query) {
    @return map.get($_ds-breakpoint-registry, $query);
  }
  @if not $validation {
    @return map.get($_ds-breakpoint-registry, $query);
  }
}

/// Retrieves the entire breakpoint registry.
/// @param {list<string>} $targets
/// @return {map} map of tokens.
@function registry-get($targets: 'all') {
  @if not feature.is-empty($targets) {
    $targeted-tokens: ();
    @each $target in $targets {
      @each $key, $value in $_ds-breakpoint-registry {
        @if string.index($key, $target) == 1 {
          $targeted-tokens: map.set($targeted-tokens, $key, $value);
        }
      }
    }
    @return $targeted-tokens;
  }

  @if $targets == 'all' {
    @return $_ds-breakpoint-registry;
  }

  @return $_ds-breakpoint-registry;
}

/// Registers a breakpoint to the registry.
/// @param {string} $key
/// @param {int} $value
/// @return {void} register breakpoint.
@mixin _register-breakpoint($key, $value) {
  $_ds-breakpoint-registry: map.set($_ds-breakpoint-registry, $key, $value) !global;
}

/// Validates a query if it's a registered token or not.
/// @access private
/// @param {string} $query
/// @return {boolean|error} is registered token
@function _is-registered-breakpoint($query, $errors: $validation) {
  @if not list.index(map.keys($_ds-breakpoint-registry), $query) {
    @if $errors {
      @error 'Invalid breakpoint: #{$query}. Please use a valid registered breakpoint: #{map.keys($_ds-breakpoint-registry)}';
    } @else {
      @return false;
    }
  } @else {
    @return true;
  }
}

/// Cleans a breakpoint based on a given context.
/// @access private
/// @param {string} $query
/// @param {string} $context
/// @return {*} clean breakpoint.
@function _sanitize-breakpoint($query, $context) {
  @if not $context == 'min' or not $context == 'max' {
    @error 'Invalid context: #{$context}. Please select from the following valid contexts: min, max.';
  } @else if $context == 'min' {
    @return get($query);
  } @else if $context == 'max' {
    @return get($query) - 1;
  }
}