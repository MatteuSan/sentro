//
//  Copyright (c) 2021 Matteu
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

@use 'sass:meta';
@use 'sass:selector';
@use 'sass:string';

$ds-prefix: 'sdb' !default;

/// Creates a selector with your design system prefix.
/// @param {string} $selector
/// @return {*} returns a selector with content block inside.
@mixin create($selector) {
    #{_prepend-selector-type($selector)} {
        @content;
    }
}

/// Determines the selector type and composes the selector name with your design system prefix.
/// @access private
/// @param {string} $selector
/// @return {string|error} returns a cleaned and prefixed selector.
@function _prepend-selector-type($selector) {
    @if string.slice($selector, 1, 1) == '&' {
        @if string.slice($selector, 2, 2) == '.' {
            @return string.unquote('&.#{$ds-prefix}-#{string.slice($selector, 3)}');
        } @else if string.slice($selector, 2, 2) == '#' {
            @return string.unquote('&##{$ds-prefix}-#{string.slice($selector, 3)}');
        } @else {
            @error 'Invalid selector type: #{string.slice($selector, 1, 1)}. Please prefix your selector by using a class selector (.) or an id selector (#).';
        }
    } @else if string.slice($selector, 1, 1) != '&' {
        @if string.slice($selector, 1, 1) == '.' {
            @return string.unquote('.#{$ds-prefix}-#{string.slice($selector, 2)}');
        } @else if string.slice($selector, 1, 1) == '#' {
            @return string.unquote('##{$ds-prefix}-#{string.slice($selector, 2)}');
        } @else {
            @error 'Invalid selector type: #{string.slice($selector, 1, 1)}. Please prefix your selector by using a class selector (.) or an id selector (#).';
        }
    }
}
